A1,,"
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4月

工作流程與步驟：
1. 系統設計與規劃
    - 根據EIP-1056定義編寫智能合約程式介面草案
    - 選用secp256r1橢圓區線加密標準作為簽章驗證技術
    - 準備公開資料集，用於未來測試

2. 智能合約開發
    - 撰寫符合EIP-1056的智能合約程式碼
    - 利用區塊鏈開發框架如 Truffle 或 Hardhat 進行合約部署測試
    - 程式碼重構與優化，確保符合設計規範

3. 單元測試和持續整合
    - 編寫單元測試，驗證智能合約各個功能模塊
    - 使用豬鼻 STEM 工具，檢測潛在漏洞
    - 實施持續整合管道，確保代碼穩定性
","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年5月

工作流程與步驟：
1. 簽章驗證測試準備
    - 從公開資料集中隨機挑選十份資料作為測試樣本
    - 設計測試用例，確保涵蓋常見的簽章驗證場景
    - 配置測試環境，確保與智能合約開發環境一致

2. 簽章驗證測試執行
    - 使用secp256r1標準對選取之資料進行簽章驗證測試
    - 記錄測試結果，包括通過與否和具體資訊
    - 分析測試中遇到的錯誤與問題，調整測試用例

3. 測試報告撰寫
    - 編制詳細的測試報告，記錄各個測試用例的執行情況
    - 概述每個測試樣本的驗證結果，並指出相關簽章的正確性
    - 提供改進建議和後續修復計畫
","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年6月

工作流程與步驟：
1. 智能合約部署
    - 綜合測試結果，進行最終的代碼修正與優化
    - 遵循區塊鏈部署流程，將智能合約部署至以太坊主網或測試網
    - 執行部署後的基本功能驗證，確保合約正常運行

2. 區塊鏈瀏覽器連結分享
    - 獲取智能合約部署後的區塊鏈瀏覽器連結
    - 檢查連結能否正常訪問智能合約並查看其詳細資訊
    - 通知相關團隊或人員，提供區塊鏈瀏覽器連結作為參考

3. 項目總結與反思
    - 總結整個開發過程中的遇到的挑戰與解決方案
    - 回顧項目需求，檢測是否完全符合EIP-1056要求
    - 編寫最終項目報告，為後續類似項目提供參考資料
",
A1,,"
工作記錄 
查核點編號： A1 智能合約開發 
記錄時間： 113年4月

工作流程與步驟：
1. 設計智能合約
    - 分析EIP-1056的規範與要求
    - 設定智能合約結構，定義介面方法
    - 撰寫初步智能合約程式碼，確保符合要求
2. 支援secp256r1簽章驗證
    - 研究並理解secp256r1橢圓曲線加密技術
    - 在智能合約中加入secp256r1簽章驗證功能
    - 測試簽章驗證程式碼，確保無誤
3. 準備測試資料
    - 收集和整理公開資料集
    - 隨機挑選十份資料，用於簽章驗證測試
    - 設計測試方案，確定測試步驟

","
工作記錄 
查核點編號： A1 智能合約開發 
記錄時間： 113年5月

工作流程與步驟：
1. 部署智能合約
    - 準備區塊鏈環境，設置必要參數
    - 確認智能合約的最終版本並進行編譯
    - 將智能合約部署至區塊鏈上，取得部署地址
2. 簽章驗證測試
    - 使用隨機挑選的十份資料進行測試
    - 運行簽章驗證功能，逐次進行資料驗證
    - 收集測試結果，記錄通過與否
3. 測試報告撰寫
    - 整理測試結果，撰寫詳細的測試報告
    - 確認每項簽章驗證結果無誤
    - 提供測試結果及報告一式

","
工作記錄 
查核點編號： A1 智能合約開發 
記錄時間： 113年6月

工作流程與步驟：
1. 測試結果審核
    - 審核所有測試結果，確保準確性
    - 對簽章驗證過程中遇到的問題進行分析和改進
    - 再次進行必要的測試以確保問題已解決
2. 智能合約連結整理
    - 搜集智能合約部署後的區塊鏈瀏覽器連結
    - 驗證連結的有效性和可訪問性
    - 整理並記錄有效連結，以備後續查詢
3. 最終報告提交
    - 彙整所有工作記錄與測試報告
    - 確認所有文件齊全無誤
    - 向相關審核部門提交最終報告及區塊鏈瀏覽器連結"
A1,,"
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計智能合約
    - 分析EIP-1056規範
    - 擬定智能合約的操作界面
    - 確定智能合約所需的功能和方法
2. 撰寫智能合約代碼
    - 使用Solidity語言編寫12項智能合約介面
    - 確保每個介面符合EIP-1056定義
    - 初步測試代碼，檢查是否有語法錯誤
3. 準備測試數據集
    - 收集並篩選公開資料集
    - 從中隨機挑選十份資料進行測試
    - 整理與測試相關的工具和文件

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. secp256r1簽章驗證測試
    - 實施secp256r1橢圓曲線加密簽章驗證功能
    - 對十份隨機資料進行簽章驗證測試
    - 記錄各項測試之通過與否情形
2. 測試報告編制
    - 完成簽章驗證測試後，整理所有測試結果
    - 編寫測試報告，詳細記錄每份資料的測試過程與結果
    - 確保測試報告格式統一，內容清晰明瞭
3. 確保智能合約功能完整
    - 再次檢查所有12項智能合約界面的實現情況
    - 修正發現的任何錯誤或不符合之處
    - 確認合約在所有預定情境下的功能正常

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 部署智能合約至區塊鏈
    - 選擇合適的區塊鏈測試環境
    - 部署完成的智能合約至區塊鏈上
    - 確認部署過程中的所有交易成功
2. 驗證部署結果
    - 透過區塊鏈瀏覽器檢查已部署的智能合約
    - 測試合約在區塊鏈上的運行效果
    - 提供已部署智能合約之區塊鏈瀏覽器連結
3. 專案總結與文檔整理
    - 彙整整個智能合約開發與測試過程中的文件和報告
    - 繪製專案流程圖，總結經驗教訓
    - 與團隊討論，確認所有工作已達成目標"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計智能合約
    - 研究並理解EIP-1056定義之智能合約程式介面。
    - 設計符合EIP-1056標準的智能合約框架。
    - 撰寫合約草稿程式碼，確保語法正確。
2. 配置加密驗證
    - 研究secp256r1橢圓曲線加密簽章技術。
    - 在智能合約中集成secp256r1簽章驗證模組。
    - 實作並測試簽章驗證功能，確保功能正常。
3. 測試準備
    - 收集並整理公開資料集，確保資料來源合法。
    - 隨機挑選十份資料，準備測試用例。
    - 設計測試用例，包含不同情境和邊界條件。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 部署智能合約測試
    - 在測試環境部署智能合約，檢查部署過程是否順利。
    - 執行初始測試，確保合約基本功能運作正常。
    - 修正任何在測試過程中發現的錯誤或異常。
2. 簽章驗證測試
    - 使用預先準備的十份資料進行secp256r1簽章驗證測試。
    - 記錄測試結果，確保每個測試用例都得到驗證。
    - 彙總測試結果，編寫測試報告，描述各項測試通過與否。
3. 優化與調整
    - 根據測試結果，進行必要的軟體調整及優化。
    - 再次進行測試，確保所有問題均已修復。
    - 準備最終版本的智能合約，準備正式部署。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 智能合約正式部署
    - 在正式的區塊鏈環境中部署優化後的智能合約。
    - 紀錄部署過程中的每一步，確保過程透明。
    - 驗證部署成功，確保合約地址正確。
2. 提供查閱連結
    - 擷取智能合約部署後的區塊鏈瀏覽器連結。
    - 確認連結公共可見，並確保所有資訊正確無誤。
    - 將連結提供給相關利益方，便於追蹤查閱。
3. 總結與報告
    - 回顧開發及測試過程，總結經驗教訓。
    - 編寫完整的技術報告，包含開發流程、測試結果及部署細節。
    - 將報告提交給主管及相關利益方，完成專案結案。"
A2,,"

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 需求分析
    - 分析API所需實現的功能：聲明文件內容定義、addSigner、verifyClaim、query。
    - 與相關人員進行需求討論，確定API的目標和用途。
    - 撰寫需求文件，明確列出要實現的功能與安全標準。
2. 設計API端點
    - 使用Express框架設計API的端點，確定每個端點對應的資源及請求方法。
    - 設計數據模型與JSON格式，確保數據在請求與回應時的一致性。
    - 制定API的文檔，內容包括每個端點的詳細描述、參數說明、例外處理等。
3. 安全機制規劃
    - 確定如何防範重入攻擊，分析潛在的安全威脅。
    - 實施驗證機制，確保每個請求的合法性。
    - 考慮數據加密與簽名機制，保護傳輸中的敏感數據。
    
","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 初期開發
    - 在Express框架中搭建基本API結構，定義初始端點。
    - 集成數據庫，設計並建立數據表，確保數據的存儲和讀寫功能正常運行。
    - 編寫初步的路由處理代碼，實現基本的addSigner、verifyClaim和query功能。
2. 測試端點
    - 使用Postman或其他API測試工具，測試每個定義的端點。
    - 實施單元測試，檢查每個功能是否達到需求文件中列出的標準。
    - 收集反饋並根據測試結果進行修改和優化，確保API的穩定性和可靠性。
3. 完善文檔
    - 更新API文檔，新增測試結果和樞紐代碼範例。
    - 補充安全機制的描述，讓使用者了解如何使用API並進行基本的安全配置。
    - 安排內部審查，確保文檔清晰且完整。

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 進階開發
    - 加強API的安全機制，避免重入攻擊，例如引入防重放攻擊的Nonce機制。
    - 延伸verifyClaim功能，增加更嚴格的驗證邏輯。
    - 為query端點加入查詢過濾和排序功能，提升數據查詢效率。
2. 性能優化
    - 進行性能測試，確定系統瓶頸並進行優化。
    - 使用緩存機制，減少數據庫查詢次數，提高查詢速度。
    - 優化代碼結構和邏輯，減少不必要的計算和數據傳輸。
3. 核心代碼優化
    - 改善數據加密和簽名算法，增強數據安全性。
    - 重構路由處理模塊，提高代碼可讀性和維護性。
    - 添加日誌功能，方便日後的問題排查和系統監控。

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 最終確認與部署
    - 完整測試所有端點及其功能，確保所有需求都已達成。
    - 檢查並更新所有依賴庫和模塊，確保系統穩定性。
    - 準備部署計劃，安排正式上線的時間和步驟。
2. 內部審核與評估
    - 進行內部代碼審核，確保代碼質量高且符合標準。
    - 整理並總結開發過程中的經驗和教訓，記錄在案以供以後參考。
    - 評估API的性能和安全性，並形成報告提交給上級審核。
3. 上線部署
    - 在生產環境部署API，進行最後的測試確保系統無誤。
    - 監控系統運行狀況，並設置預警機制應對突發情況。
    - 收集使用反饋，及時進行小範圍的修正與優化。"
A2,"工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 設計API端點（Initial Endpoint Design）
    - 確定資源
    - 設計請求方法 (GET, POST, PUT, DELETE)
    - 定義回應資料格式
2. 確定API功能（Add Additional Functionalities）
    - 定義 addSigner 模組
    - 定義 verifyClaim 模組
    - 定義 query 模組
3. 初步測試（Initial Testing）
    - 單元測試各功能模組
    - 確認請求方法和回應格式正確
    - 修正初步出現的問題與錯誤

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 開發API邏輯（Develop API Logic）
    - 使用express框架開發端點功能
    - 寫入 addSigner 的API邏輯
    - 寫入 verifyClaim 的API邏輯
2. 安全機制規劃（Security Mechanism Planning）
    - 設計避免重入攻擊的機制
    - 資料加密與解密設計
    - 權限驗證與授權系統
3. 系統效能優化（System Performance Optimization）
    - 測試API響應時間
    - 優化資料庫查詢
    - 減少不必要的伺服器負擔

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. API綜合測試（Comprehensive API Testing）
    - 綜合測試 addSigner API功能
    - 綜合測試 verifyClaim API功能
    - 綜合測試 query API功能
2. 安全性測試（Security Testing）
    - 模擬重入攻擊進行測試
    - 測試授權機制的有效性
    - 測試資料加密與解密功能
3. 錯誤修正與調整（Bug Fixes and Adjustments）
    - 修正測試中發現的漏洞
    - 調整API回應格式以提高可讀性
    - 優化授權與安全機制

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 文件撰寫與整理（Documentation Compilation）
    - 撰寫API文件，包含每個端點的詳細說明
    - 整理 addSigner、verifyClaim 及 query 功能之文件
    - 提供API使用範例
2. 最終測試與部署（Final Testing and Deployment）
    - 執行最終全系統測試
    - 確保所有功能點運行正常
    - 部署API至生產環境
3. 項目總結與報告（Project Summary and Reporting）
    - 總結API設計與開發過程
    - 編寫項目報告
    - 確認達成目標並評估未來改進點"
A2,,"
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 設計API端點
    - 確定API所需資源（如：signer, claim, query）
    - 定義各端點的請求方法（如：POST, GET）
    - 制定回應資料的JSON格式
2. Endpoint 細節規劃
    - 設計""addSigner""的端點
    - 設計""veriftyClaim""的端點
    - 設計""query""功能的端點
3. 使用Express框架
    - 安裝Express框架
    - 編寫基本API結構
    - 測試端點回應

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 安全機制設計
    - 防止重入攻擊的方案設計
    - 檢查系統效能影響的評估
    - 安全驗證機制的介入
2. 增強API安全性
    - 實施令牌認證（Token Authentication）
    - 控制請求速率（Rate Limiting）
    - 加密通訊（HTTPS）
3. 使用Express框架繼續開發
    - 集成安全模組
    - 調整端點響應以配合安全需求
    - 驗證安全機制的有效性

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. API功能開發
    - 開發""addSigner""功能
    - 開發""veriftyClaim""功能
    - 開發""query""功能
2. 單元測試
    - 撰寫""addSigner""的測試案例
    - 撰寫""veriftyClaim""的測試案例
    - 撰寫""query""功能的測試案例
3. 使用Express框架現代化
    - 重構代碼以提高可讀性
    - 使用中間件來處理錯誤和請求
    - 持續檢查和改進API效能

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 系統整合與測試
    - 進行整合測試以確保各功能協同工作
    - 測試API在不同情境下的表現
    - 測試安全機制在實際環境中的效能
2. 文件撰寫
    - 編寫完整的API規格文件
    - 詳述各端點及其功能說明
    - 說明API的安全機制和使用方法
3. 使用Express框架最終調整
    - 優化代碼以提高效能
    - 應用最佳實踐來改善安全性
    - 准備API上線部署的前期工作

",
