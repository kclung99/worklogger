A1,"

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年2月

工作流程與步驟：
1. 設計和定義智能合約
    - 根據EIP-1056標準設計12項智能合約程式介面
    - 審查並確認每項介面功能符合需求
    - 記錄介面設計說明以供後續開發參考

2. 確定secp256r1簽章驗證需求
    - 蒐集並分析支援secp256r1的開發資源
    - 制定測試計劃，選定公開資料集，選取十份資料
    - 確認簽章驗證的技術規範和要求

3. 開發環境及工具準備
    - 設置開發環境，包括安裝相關開發工具如Truffle、Ganache等
    - 編寫智能合約基本骨架
    - 測試開發環境，確保所有工具正常運行

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4月

工作流程與步驟：
1. 智能合約開發與測試
    - 根據設計文件編寫智能合約程式碼
    - 每完成一項功能即進行單元測試，確保功能無誤
    - 整合所有功能，進行全面測試，確保相互間不衝突

2. 签章驗證測試
    - 對選定的十份資料進行secp256r1簽章驗證
    - 記錄測試結果並編寫測試報告，標明各項測試通過與否
    - 根據測試報告調整智能合約，修正發現的錯誤

3. 智能合約部署準備
    - 優化智能合約代碼，確保效能與安全性
    - 撰寫部署文檔，包含步驟及注意事項
    - 選擇適合的區塊鏈平台進行部署測試，確保部署過程順利

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年6月

工作流程與步驟：
1. 智能合約部署
    - 按部署文檔將優化後的智能合約部署至選定的區塊鏈平台
    - 測試部署後的合約功能，確保部署無誤
    - 提供已部署智能合約之區塊鏈瀏覽器連結

2. 測試與驗證報告
    - 再次核對十份資料的簽章驗證，確保測試結果一致
    - 編寫最終測試報告，詳細記錄每次測試結果
    - 提交測試報告，並根據反饋進行最後修正

3. 文件與知識轉移
    - 完成最終版本的智能合約文檔，含操作指南及維護說明
    - 舉辦內部知識分享會，介紹項目成果及技術點
    - 確保技術文件和部署文檔共享至團隊資料庫中"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年2月

工作流程與步驟：
1. 智能合約程式介面設計
    - 依據EIP-1056標準進行需求分析。
    - 設計12項智能合約之功能介面。
    - 撰寫初步介面設計文件，並進行內部審查與反饋。
2. 使用secp256r1簽章驗證
    - 研究與選定適用之secp256r1簽章驗證工具。
    - 編寫測試樣例，確保工具能正確執行簽章驗證之各種場景。
    - 準備公開資料集作測試使用。
3. 預部署環境準備
    - 設定測試區塊鏈環境，模擬實際部署情境。
    - 部署智能合約範本至測試區塊鏈並記錄相關操作步驟。
    - 確認預部署環境中智能合約運行狀態正常且無誤。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4月

工作流程與步驟：
1. 智能合約之實作
    - 具體撰寫12項智能合約功能，依據既有設計文件進行實作。
    - 開發過程中，持續進行單元測試，確保各項功能正確無誤。
    - 將智能合約功能模組化，提升可重用性與維護性。
2. secp256r1簽章驗證測試
    - 使用公開資料集，隨機挑選十份資料進行簽章驗證測試。
    - 記錄各項測試結果，並詳列通過與否之報告。
    - 對於測試未通過之項目，分析原因並進行修正。
3. 部署智能合約
    - 采用測試階段部署步驟，將智能合約部署至正式區塊鏈上。
    - 確認部署後智能合約運行正常，並發布區塊鏈瀏覽器連結。
    - 編寫部署文檔，詳細記錄部署過程與遇到之問題及其解決方案。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年7月

工作流程與步驟：
1. 智能合約樣例驗證
    - 使用隨機選定之公開資料，進行完整智能合約功能驗證。
    - 輸出驗證結果，確保所有功能均如預期運行。
    - 對驗證中發現之潛在問題進行修正與優化。
2. 測試報告編寫
    - 完整撰寫通過與否之測試報告一式，詳細描述測試步驟、結果及問題分析。
    - 將測試報告交由內部審查，徵求反饋並進行必要修訂。
    - 最終版測試報告整理並歸檔，以備未來查考。
3. 智能合約部署與驗證
    - 確認區塊鏈瀏覽器可正常查看已部署智能合約詳細資訊。
    - 審查區塊鏈瀏覽器連結，確保用戶可便捷查看智能合約狀態。
    - 向團隊及相關利益方匯報最終部署結果，確保項目交付成功。"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年2月

工作流程與步驟：
1. 設計智能合約接口
    - 研究EIP-1056定義的智能合約程式介面。
    - 確定12項EIP-1056定義的主要功能和接口需求。
    - 編寫智能合約接口設計文檔，確保包括所有必要細節。
2. 開發智能合約
    - 根據設計文檔開始編寫智能合約代碼。
    - 針對secp256r1橢圓曲線加密，實現簽章驗證功能。
    - 初步調試智能合約，確保基本功能正常。
3. 測試準備
    - 準備公開資料集，隨機挑選十份資料。
    - 設計測試用例，覆蓋所有12項功能和簽章驗證。
    - 撰寫測試報告模板，確定測試結果標準。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4月

工作流程與步驟：
1. 實施測試方案
    - 從公開資料集中隨機挑選十份資料，用於secp256r1簽章驗證測試。
    - 執行測試用例，檢查智能合約的每項功能是否按預期工作。
    - 收集測試數據和結果，記錄通過與否情況。
2. 測試報告撰寫
    - 整理和分析測試數據，填寫測試報告模板。
    - 彙總十份資料的簽章驗證結果，確定每一項功能的通過情況。
    - 撰寫綜合測試報告，提供詳細的測試分析和建議優化方案。
3. 部署準備
    - 檢查智能合約代碼，確保無錯誤的潛在問題。
    - 確認合約代碼與部署環境的兼容性。
    - 準備智能合約的部署腳本和自動化工具。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年6月

工作流程與步驟：
1. 部署智能合約
    - 部署智能合約至區塊鏈上，使用部署腳本和自動化工具。
    - 驗證部署後智能合約的可用性和功能完整性。
    - 生成已部署智能合約的區塊鏈瀏覽器連結，便於後續查閱。
2. 檢查與驗證
    - 再次執行簽章驗證測試，確保智能合約在真實環境中的運行效果一致。
    - 綜合各資料的測試結果，確認所有功能正常工作。
    - 確保智能合約的安全性和性能達到預期標準。
3. 最終報告與提交
    - 撰寫最終智能合約開發與測試報告，包括步驟、結果和改進建議。
    - 提交智能合約開發的完整文檔和測試報告，確保可追溯性。
    - 發佈區塊鏈瀏覽器連結與項目團隊分享，便於進行進一步的審查和驗證。"
A2,"工作記錄
查核點編號： A2 平台 API 設計
記錄時間： 113年2月

工作流程與步驟：
1. API端點設計
    - 確認系統資源分類並設計功能端點，包括addSigner，verifyClaim，query等功能。
    - 探討不同的HTTP請求方法如何對應端點設計，確保操作符合RESTful設計原則。
    - 規劃回應資料格式，統一使用JSON格式，並進行詳細的欄位定義，以保證前後端一致性。
2. 宣告文件內容定義
    - 編寫詳細的宣告文件內容定義，列出每個功能所需的輸入參數與回應參數。
    - 確認各功能端點所需的授權和認證流程。
    - 強調輸入參數的驗證機制，以提高API的健壯性。
3. 安全機制規劃
    - 設計避免重入攻擊的具體方案，確保系統在多並發環境下的穩定性。
    - 採用合適的加密技術來保護敏感數據，防止數據洩露。
    - 定期安全測試與代碼審計，持續改進安全策略。

","

工作記錄
查核點編號： A2 平台 API 設計
記錄時間： 113年4月

工作流程與步驟：
1. 功能開發與測試
    - 完成addSigner，verifyClaim，query功能模塊的編碼工作。
    - 建立單元測試與集成測試環境，確保每個API端點的功能正確性。
    - 進行性能測試和壓力測試，以確保系統在高負載下的表現。
2. 安全機制實施
    - 實施重入攻擊防禦策略，確認其中間件和框架設定與策略相符。
    - 導入應用層加密，確保敏感信息在傳輸過程中的安全性。
    - 通過安全漏洞掃描工具進行詳細的安全審查，並修復所發現的任何問題。
3. 文件更新與維護
    - 根據最新的開發進展更新API聲明文件，確保內容準確完整。
    - 增加詳細的使用說明和範例代碼，方便其他開發團隊調用API。
    - 設立變更紀錄，追踪所有API變更並適時通知相關開發者。

","

工作記錄
查核點編號： A2 平台 API 設計
記錄時間： 113年6月

工作流程與步驟：
1. 內部測試与調整
    - 在內部網絡環境中部署API服務，進行跨團隊測試和調整。
    - 收集內部測試反饋，針對問題點進行優化與修正。
    - 強化請求參數驗證與回應數據一致性檢查，確保高質量的API輸出。
2. 安全措施強化
    - 對API進行滲透測試，模擬不同類型的攻擊場景，測試防禦能力。
    - 完善日誌系統，實施細緻的日誌記錄與分析，以發現潛在的安全威脅。
    - 定期更新安全策略，根據最新的威脅情報調整防禦措施。
3. 運行環境準備
    - 準備生產環境的基礎設施，確保部署流程順暢。
    - 配置監控工具，實時監控API服務的運行情況和系統性能。
    - 制定應急預案，確保在遇到突發情況時能夠迅速響應和恢復。

","

工作記錄
查核點編號： A2 平台 API 設計
記錄時間： 113年7月

工作流程與步驟：
1. 最終驗收與上線準備
    - 完成最終驗收測試，包括功能驗收，性能測試和安全檢查。
    - 獲取各部門的最終確認和批准，確保所有需求已被滿足。
    - 準備上線文件與文檔，確保運維團隊了解系統的部署與維護步驟。
2. API部署與發布
    - 在生產環境中進行API部署，並進行初步的正確性檢查。
    - 公佈API文檔給開發者社區，提供支持和解答相關的技術問題。
    - 監控API運行情況，隨時處理可能出現的問題，並及時修正。
3. 後續支持與改進
    - 持續監控系統性能和安全狀況，定期進行性能優化與安全更新。
    - 收集用戶反饋，確定下一階段的改進和新功能開發計劃。
    - 舉辦內部技術分享會，總結項目的經驗教訓，促進團隊成長。"
A2,"工作記錄
查核點編號： A2 平台 API 設計
記錄時間： 113年2-7月

工作流程與步驟：
1. 設計API的端點
    - 決定 addSigner 端點，規範請求方法為 POST，回應格式為 JSON
    - 設計 verifyClaim 端點，設定請求方法為 GET，回應格式為 JSON
    - 確定 query 功能的端點，使用 GET 方法，回應 JSON 格式資料
2. 安全部分規劃
    - 設定身份驗證機制，使用 token 驗證以防未授權存取
    - 規劃請求速率限制（Rate Limiting），避免重入攻擊和過度請求
    - 將敏感資料在傳輸過程中進行加密，確保資料完整性
3. 整合與測試
    - 將各端點整合至開發環境，完成初步測試
    - 針對不同情境設計測試用例，確認所有API功能正常
    - 測試不同使用者權限下的功能，避免權限漏洞

","

工作記錄
查核點編號： A2 平台 API 設計
記錄時間： 113年2-7月

工作流程與步驟：
1. API文件撰寫
    - 編寫 API 規格文件，逐項說明 addSigner、verifyClaim 與 query 功能
    - 定義每個端點的請求參數與回應格式，確保一致性
    - 安全機制部分，包括 token 驗證與資料加密等內容
2. 測試環境配置
    - 建立測試環境供 QA 團隊使用
    - 移除開發環境特有配置，確保測試充分模擬真實世界
    - 配置測試數據庫，驗證各 API 的 CRUD 功能
3. 安全測試準備
    - 規劃並安排安全性測試，包括 SQL 注入、XSS 等常見攻擊
    - 測試拒絕服務（DoS）攻擊的抵禦能力，確保系統穩定性
    - 定期更新安全漏洞庫，根據最新威脅調整安全策略

","

工作記錄
查核點編號： A2 平台 API 設計
記錄時間： 113年2-7月

工作流程與步驟：
1. 實作 API 功能
    - 開發 addSigner API 功能，確保能處理所有預期用例
    - 實現 verifyClaim 功能，進行完整性驗證
    - 開發 query 功能，支持多種查詢條件
2. 性能優化
    - 針對每個端點進行性能測試，找出潛在瓶頸
    - 優化資料庫查詢，減少延遲提升性能
    - 利用緩存技術，減少頻繁查詢對系統的負荷
3. 用戶驗證流程
    - 實作 JWT 驗證機制，確保每個 API 請求的合法性
    - 加入用戶角色管理，設定不同權限級別
    - 測試不同用戶角色的 API 訪問權限，避免越權操作

","

工作記錄
查核點編號： A2 平台 API 設計
記錄時間： 113年2-7月

工作流程與步驟：
1. 最終審查與優化
    - 審查所有 API 文件的規範性及正確性，確保無遺漏
    - 確認每個端點的安全措施均已實施，如 token 驗證與加密
    - 優化 API 回應格式，確保一致及易於解析
2. 項目發佈準備
    - 計劃發佈流程，通知相關團隊調整協同工作
    - 準備發佈文檔，包含 API 變更及新功能介紹
    - 執行最終的全系統測試，確保無重大問題
3. 發佈後監控
    - 使用監控工具查看 API 訪問狀況，檢測可能的瓶頸
    - 收集用戶反饋，了解使用過程中的潛在問題
    - 對於發現的問題，及時進行修正和更新"
