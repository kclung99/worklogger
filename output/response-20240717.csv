A1,"
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計階段
    - 分析與理解EIP-1056 標準。
    - 設計符合EIP-1056之智能合約介面。
    - 確認介面支援secp256r1 橢圓曲線加密簽章驗證。

2. 核心程式開發
    - 開發智能合約程式碼實現12項EIP-1056定義要求。
    - 撰寫並整合secp256r1簽章驗證功能至智能合約。
    - 進行單元測試以驗證智能合約功能。

3. 測試與驗證
    - 收集公開資料集，並隨機選取十份資料進行secp256r1簽章驗證測試。
    - 撰寫測試報告，記錄各項測試結果與通過與否。
    - 確認所有測試均符合預期結果。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 實施階段
    - 部署智能合約至測試網進行初步驗證。
    - 修正部署過程中發現之錯誤與潛在問題。
    - 確認智能合約之部署邏輯和運行狀態正常。

2. 公開測試
    - 使用公開資料集進行secp256r1簽章驗證的全面測試。
    - 收集測試數據，並撰寫完整測試報告。
    - 確認所有功能符合設計規範，並無重大漏洞。

3. 上線部署
    - 將驗證通過之智能合約部署至正式區塊鏈網路。
    - 記錄部署過程及相關交易資訊。
    - 提供區塊鏈瀏覽器連結以供查證。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 精細調整
    - 根據測試報告結果，進行必要程式優化。
    - 改善智能合約之效能和安全性。
    - 重新進行secp256r1簽章驗證確保更改之正確性。

2. 審核與文檔
    - 撰寫智能合約開發及測試之技術文檔。
    - 確認所有記錄、測試報告及部署文檔完整正確。
    - 整理所有開發過程之外部聯繫及協作記錄。

3. 最終確認 
    - 最終審核智能合約在正式區塊鏈上的部署情況。
    - 確認所有功能運行正常並符合預期。
    - 發佈區塊鏈瀏覽器連結，完成工作交接。"
A1,"
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計智能合約接口
    - 遵循EIP-1056智能合約的標準規範。
    - 定義十二項智能合約功能的接口。
    - 確保合約接口支援secp256r1橢圓區線加密的簽章驗證。

2. 測試資料準備
    - 使用公開資料集，隨機挑選十份資料作為測試樣本。
    - 確認測試數據的有效性。
    - 預先準備好測試報告模板，以便後續填寫。

3. 測試環境配置
    - 設置區塊鏈開發環境，包含智能合約編譯器及測試框架。
    - 安裝必要工具以支援智能合約的開發和測試。
    - 確認測試網路連接正常，能夠模擬實際的區塊鏈部署環境。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 開發智能合約
    - 根據設計好的接口編寫智能合約代碼。
    - 對每一個功能進行單元測試，確保其正確性。
    - 支援secp256r1橢圓區線加密的簽章驗證部分完成實作。

2. 測試智能合約
    - 部署智能合約至測試網路進行初步測試。
    - 使用十份隨機測試資料進行簽章驗證測試。
    - 記錄每次測試的通過與否，並總結所有測試結果。

3. 條列測試報告
    - 整理每次測試結果，撰寫詳細測試報告。
    - 測試報告應包含簽章驗證通過與否的詳細描述。
    - 確保測試報告格式完整且易於理解。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 部署智能合約
    - 智能合約部署至正式區塊鏈網路。
    - 確認智能合約部署地址及其在區塊鏈瀏覽器中的鏈接。
    - 測試智能合約在正式環境下的功能，確保無錯誤。

2. 最終測試與驗證
    - 重複測試所有使用公開資料集進行簽章驗證的步驟。
    - 核對測試結果與初步測試的一致性。
    - 完成最終測試報告，列明所有通過與失敗的測試案例。

3. 文檔和交付
    - 編寫最終智能合約說明文檔。
    - 將智能合約的區塊鏈瀏覽器連結、測試報告一併整理。
    - 確認所有文檔和數據的完整性與準確性，並准備交付。 
"
A1,"
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4月

工作流程與步驟：
1. 設計智能合約
    - 編寫符合EIP-1056規範的智能合約介面。
    - 確認智能合約涵蓋EIP-1056所定義的十二項功能。
    - 規劃合約簽章驗證邏輯，支持secp256r1橢圓曲線加密。

2. 收集測試資料集
    - 使用公開資料集，隨機抽取十份資料進行測試。
    - 整理測試資料格式，確保能與智能合約匹配。
    - 準備資料驗證環境，模擬真實使用情境。

3. 編碼準備
    - 設置開發環境，確保所有工具與依賴都已安裝。
    - 分配團隊成員，安排每人負責特定合約功能的編寫。
    - 撰寫初步測試腳本，確保功能可以通過單元測試。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年5月

工作流程與步驟：
1. 實作智能合約
    - 根據設計文件撰寫智能合約代碼。
    - 完成各項功能的單元測試，確保每個模組正確。
    - 對智能合約進行內部審核，確保程式碼符合規範。

2. 測試簽章驗證
    - 根據收集的資料集，進行secp256r1簽章驗證測試。
    - 記錄每次測試結果，包括通過與否以及相關數據。
    - 整理並生成測試報告，匯總所有測試結果。

3. 部署智能合約
    - 選擇適當的區塊鏈平台進行合約部署。
    - 準備部署工具與環境，確保部署過程順利。
    - 實施智能合約部署，確認合約成功上鏈。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年6月

工作流程與步驟：
1. 最終測試與驗證
    - 再次檢查智能合約功能，確保所有規定功能無誤。
    - 執行全局測試，包括整合測試與壓力測試。
    - 審查測試報告，確認測試通過並記錄所有測試數據。

2. 公佈測試結果
    - 編輯並發布最終測試報告，描述各項測試細節與結果。
    - 將測試報告分享給相關利益相關者。
    - 根據測試結果進行必要的改進與修正。

3. 資料鏈接與記錄
    - 提供已部署智能合約的區塊鏈瀏覽器連結。
    - 整理並存檔所有工作記錄與文件。
    - 準備下一階段開發計畫，根據反饋進行優化。"
A1,"
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4月

工作流程與步驟：
1. 設計智能合約架構
    - 研究並理解EIP-1056標準中的合約接口定義
    - 確定智能合約的主要功能模塊及其相互關係
    - 編寫智能合約的初始草稿

2. 實現secp256r1簽章驗證
    - 探索並確認支援secp256r1橢圓曲線加密簽章的技術方案
    - 在智能合約中實現簽章驗證函式
    - 進行基本單元測試以確保簽章驗證功能正確

3. 部署前的準備工作
    - 整理智能合約代碼並進行初步代碼審查
    - 搭建區塊鏈測試環境以模擬部署
    - 設計部署流程並準備部署腳本

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年5月

工作流程與步驟：
1. 部署智能合約到測試鏈上
    - 遵循部署流程將智能合約部署到本地測試鏈
    - 在測試鏈環境中進行功能驗證，確保合約的預期行為
    - 修正測試中出現的任何錯誤或異常情況

2. 測試公開資料集的簽章驗證
    - 使用公開資料集隨機挑選十份資料進行簽章驗證測試
    - 實施各項簽章驗證並記錄結果
    - 撰寫驗證測試報告，詳細描述各項測試通過與否

3. 部署智能合約到正式鏈上
    - 確保所有測試通過後，準備將智能合約部署到正式鏈上
    - 監控正式鏈上的部署過程，確保部署順利完成
    - 生成並保存區塊鏈瀏覽器連結，以便日後查閱

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年6月

工作流程與步驟：
1. 後續測試與優化
    - 在正式鏈上進行進一步的測試確保穩定性
    - 收集用戶反饋及運行情況進行必要的調整和優化
    - 確保合約在多種情境下能夠穩定運行

2. 最終測試報告撰寫
    - 編寫最終的測試報告，包含所有測試資料及結果
    - 匯總從公開資料集中選取的十份資料的簽章驗證結果
    - 提交最終測試報告一式，完整記錄各項測試通過與否

3. 項目審核與總結
    - 進行全面的項目審核，確定所有工作流程均已達成預期目標
    - 與團隊召開總結會議，回顧項目中的經驗教訓
    - 撰寫項目總結報告，紀錄從設計到部署的完整流程及心得

"
A2,"工作記錄  
查核點編號： A2 平台API設計  
記錄時間： 113年7-9月  

工作流程與步驟：  
1. 設計API端點
    - 確定資源和操作方法
    - 定義 /addSigner, /verifyClaim 及 /query 端點
    - 確定每個端點的請求（request）和回應（response）資料格式
2. 安全機制規劃
    - 分析重入攻擊風險
    - 設計防範措施
    - 整合安全機制到API設計
3. Express框架整合
    - 使用Express創建基本API結構
    - 定義各端點的路由和處理程序
    - 測試端點基本功能性

","

工作記錄  
查核點編號： A2 平台API設計  
記錄時間： 113年7-9月  

工作流程與步驟：  
1. 端點詳細設計
    - 進一步細化 /addSigner, /verifyClaim 和 /query 的參數
    - 對各種可能回應狀態碼進行定義
    - 確認未來擴展的可能性和靈活性
2. 增強安全機制
    - 研討和實施基於令牌（token-based）的身份驗證
    - 防禦重入攻擊的特定措施：nonce使用機制
    - 增加速率限制（rate limiting）功能，防止暴力攻擊
3. API測試計劃
    - 為每個端點編寫單元測試
    - 使用Postman進行基本功能性測試
    - 針對不同用例進行API的整合測試

","

工作記錄  
查核點編號： A2 平台API設計  
記錄時間： 113年7-9月  

工作流程與步驟：  
1. API開發
    - 使用Express實現 /addSigner 端點
    - 實施 /verifyClaim 端點，包括效能優化
    - 完成 /query 端點並確保資料的準確性
2. 整合安全技術
    - 實現基於JWT（JSON Web Token）的身份驗證
    - 在後端加入重入保護機制
    - 完成速率限制功能並進行性能測試
3. 結合開發和測試
    - 安裝並配置測試環境
    - 為主要功能端到端測試
    - 進行負載測試以確定效能瓶頸

","

工作記錄  
查核點編號： A2 平台API設計  
記錄時間： 113年7-9月  

工作流程與步驟：  
1. API完善和優化
    - 進行代碼重構以增強可讀性和維護性
    - 根據測試結果微調 /addSigner 和 /verifyClaim
    - 增強 /query 端點的數據處理流程
2. 安全審核與改進
    - 通過第三方工具進行安全審計
    - 修正審計中發現的潛在漏洞
    - 進一步強化身份驗證和授權機制
3. 最終測試和文檔
    - 編寫並更新API使用說明文檔
    - 進行最後一輪的綜合測試，確保無BUG
    - 准備API的發佈和部署流程"
A2,"

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7月

工作流程與步驟：
1. 設計API端點（Endpoints）
   - 研討API規格文件一式，包括聲明文件內容定義。
   - 確認需要的資源及請求方法，如POST、GET等。
   - 設計API的回應資料格式，確保符合需求。

2. 規劃API的功能
   - 具體設計addSigner 功能的端點和邏輯。
   - 確認veriftyClaim 功能的請求與回應模式。
   - 定義query 功能的輸入與輸出參數。

3. 安全機制設計
   - 初步構思防止重入攻擊的策略。
   - 評估系統效能潛在影響及其解決方案。
   - 討論不同安全機制的實施方法。

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年8月

工作流程與步驟：
1. 實際設計API端點
   - 使用express框架編寫addSigner 的端點代碼。
   - 定義verifyClaim 的API結構和數據驗證邏輯。
   - 開發query 端點並測試其查詢功能。

2. 實施安全機制
   - 在API中加入驗證token的機制以增強安全性。
   - 編寫防止重入攻擊的程式碼。
   - 測試防止重入攻擊的有效性。

3. 效能評估
   - 進行效能測試以評估API的響應時間。
   - 分析大量使用情況下的系統表現。
   - 調整API設計以優化效能。

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年9月

工作流程與步驟：
1. API測試與優化
   - 針對addSigner 功能進行全面測試，確保準確性。
   - 測試verifyClaim 功能的各種邊界情況。
   - 優化query 功能，提升查詢速度。

2. 安全性再檢視
   - 重新審查防止重入攻擊的機制，提高健壯性。
   - 增加額外安全層，使用加密與驗證技術。
   - 確保API的整體安全性，經過內部與外部測試。

3. 文件更新
   - 更新API聲明文件，反映最新修改與優化。
   - 添加安全機制說明，便於開發者理解。
   - 編寫使用說明及範例，增進用戶體驗。

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年9月

工作流程與步驟：
1. 最終評估與反饋
   - 收集內部開發團隊的反饋，改進API設計。
   - 確認所有功能模塊測試通過，不存在明顯漏洞。
   - 進行最終效能測試，驗證系統在高負載情況下的表現。

2. 發佈準備
   - 完成API的最終代碼檢查與合併。
   - 準備發佈版本，確保所有文件齊備。
   - 設置監控系統，以便及時發現和解決問題。

3. 未來計劃
   - 擬定API未來的更新計劃，包括新功能和優化項目。
   - 制定定期安全檢查的計劃，確保API長期穩定性。
   - 與用戶保持溝通，及時收集使用反饋進行改進。"
A2,"
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 設計API端點
    - 確定資源，討論API的主要功能和數據模型。
    - 訂定addSigner端點及其請求方法（如POST）。
    - 訂定veriftyClaim及query功能端點，確定GET及POST請求方法。
2. 規劃請求與回應格式
    - 定義API請求的JSON格式，確保數據一致性。
    - 設計API回應數據結構，包含成功與錯誤訊息。
    - 文件化所有端點，製作初步API規格說明書。
3. 安全機制設計
    - 討論重入攻擊風險及應對策略。
    - 著手設計身份驗證和授權架構。
    - 利用express中間件進行基本的身份驗證測試。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. API實作
    - 使用express框架建立初步API骨架。
    - 實作addSigner端點，處理POST請求，並返回相應的結果。
    - 實作veriftyClaim和query端點，確保GET及POST請求的正確回應。
2. 測試API功能
    - 開發測試套件，驗證各個端點的功能。
    - 測試addSigner端點，模擬不同請求情境。
    - 測試veriftyClaim及query功能，確保資料驗證及查詢準確。
3. 改善和調整
    - 根據測試結果，進行初步Bug修正。
    - 調整API回應內容，使信息更為詳細。
    - 準備API規格文件進行內部審核。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. API規格文件審核
    - 組織內部審閱會議，檢查API規格文件內容。
    - 收集開發團隊及相關人員的反饋意見。
    - 根據反饋，調整API規格文件，完善聲明文件內容。
2. 安全測試與評估
    - 進行API端點的安全測試，特別關注重入攻擊的防禦效果。
    - 利用模擬攻擊測試身份驗證和授權機制的安全性。
    - 根據測試結果，調整防禦策略和安全措施。
3. 最終驗收
    - 進行功能驗收，確保所有API端點都能正常運行。
    - 確認API回應格式和數據結構的一致性及完整性。
    - 將最終的API規格文件上傳至團隊共享平台。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 跨部門協作
    - 與前端團隊討論API端點的實作，確保前後端一致性。
    - 暸解前端需求，對API端點做出必要擴展。
    - 結合使用者測試（UAT）結果，進行最後調整。
2. 部署及監控
    - 計劃API的部署步驟，確定發布流程。
    - 部署API至測試環境，監控API運行情況。
    - 根據監控結果，調整API性能及安全防護措施。
3. 文件化與培訓
    - 完成API開發者文件及用戶指南。
    - 組織培訓會議，向相關人員講解API的使用。
    - 收集培訓反饋，進一步完善資料和文件。"
