A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 設計智能合約程式介面
    - 研究EIP-1056的定義，確認12項智能合約程式介面的需求
    - 設計符合EIP-1056標準的智能合約程式介面

2. 開發支援secp256r1簽章驗證功能
    - 學習secp256r1橢圓區線加密演算法
    - 實作簽章驗證功能的智能合約程式

3. 部署智能合約至區塊鏈
    - 選擇適合的區塊鏈平台，進行智能合約部署
    - 測試在區塊鏈上運行的智能合約，確保其功能正常

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 北選取公開資料集
    - 瀏覽多個公開資料集，找到適合的一份
    - 從資料集中隨機挑選十份資料進行測試

2. 進行secp256r1簽章驗證測試
    - 使用secp256r1演算法對選取的十份資料進行簽章
    - 使用智能合約中的驗證功能進行簽章驗證

3. 撰寫測試報告
    - 記錄每份資料經過驗證後的結果
    - 總結各項測試通過與否，撰寫完整的測試報告

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 提供已部署智能合約之區塊鏈瀏覽器連結
    - 確認智能合約已成功部署至區塊鏈上
    - 取得智能合約在區塊鏈瀏覽器上的連結，以供查核

2. 檢討與改進
    - 回顧整個智能合約開發過程，檢討可能的改進空間
    - 根據測試報告和使用者反饋，進行智能合約程式介面的優化和改進

3. 提交最終成果
    - 提交完整的智能合約程式介面及測試報告
    - 確保智能合約部署情況良好，並提供連結供查核。"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 設計智能合約程式介面
    - 研究EIP-1056的定義，確認12項智能合約程式介面的需求
    - 設計符合EIP-1056標準的智能合約程式介面

2. 開發支援secp256r1簽章驗證功能
    - 學習secp256r1橢圓區線加密演算法
    - 實作簽章驗證功能的智能合約程式

3. 部署智能合約至區塊鏈
    - 選擇適合的區塊鏈平台，進行智能合約部署
    - 測試在區塊鏈上運行的智能合約，確保其功能正常

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 北選取公開資料集
    - 瀏覽多個公開資料集，找到適合的一份
    - 從資料集中隨機挑選十份資料進行測試

2. 進行secp256r1簽章驗證測試
    - 使用secp256r1演算法對選取的十份資料進行簽章
    - 使用智能合約中的驗證功能進行簽章驗證

3. 撰寫測試報告
    - 記錄每份資料經過驗證後的結果
    - 總結各項測試通過與否，撰寫完整的測試報告

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 提供已部署智能合約之區塊鏈瀏覽器連結
    - 確認智能合約已成功部署至區塊鏈上
    - 取得智能合約在區塊鏈瀏覽器上的連結，以供查核

2. 檢討與改進
    - 回顧整個智能合約開發過程，檢討可能的改進空間
    - 根據測試報告和使用者反饋，進行智能合約程式介面的優化和改進

3. 提交最終成果
    - 提交完整的智能合約程式介面及測試報告
    - 確保智能合約部署情況良好，並提供連結供查核。"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 設計智能合約程式介面
    - 研究EIP-1056的定義，確認12項智能合約程式介面的需求
    - 設計符合EIP-1056標準的智能合約程式介面

2. 開發支援secp256r1簽章驗證功能
    - 學習secp256r1橢圓區線加密演算法
    - 實作簽章驗證功能的智能合約程式

3. 部署智能合約至區塊鏈
    - 選擇適合的區塊鏈平台，進行智能合約部署
    - 測試在區塊鏈上運行的智能合約，確保其功能正常

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 北選取公開資料集
    - 瀏覽多個公開資料集，找到適合的一份
    - 從資料集中隨機挑選十份資料進行測試

2. 進行secp256r1簽章驗證測試
    - 使用secp256r1演算法對選取的十份資料進行簽章
    - 使用智能合約中的驗證功能進行簽章驗證

3. 撰寫測試報告
    - 記錄每份資料經過驗證後的結果
    - 總結各項測試通過與否，撰寫完整的測試報告

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 提供已部署智能合約之區塊鏈瀏覽器連結
    - 確認智能合約已成功部署至區塊鏈上
    - 取得智能合約在區塊鏈瀏覽器上的連結，以供查核

2. 檢討與改進
    - 回顧整個智能合約開發過程，檢討可能的改進空間
    - 根據測試報告和使用者反饋，進行智能合約程式介面的優化和改進

3. 提交最終成果
    - 提交完整的智能合約程式介面及測試報告
    - 確保智能合約部署情況良好，並提供連結供查核。"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 設計智能合約程式介面
    - 研究EIP-1056的定義，確認12項智能合約程式介面的需求
    - 設計符合EIP-1056標準的智能合約程式介面

2. 開發支援secp256r1簽章驗證功能
    - 學習secp256r1橢圓區線加密演算法
    - 實作簽章驗證功能的智能合約程式

3. 部署智能合約至區塊鏈
    - 選擇適合的區塊鏈平台，進行智能合約部署
    - 測試在區塊鏈上運行的智能合約，確保其功能正常

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 北選取公開資料集
    - 瀏覽多個公開資料集，找到適合的一份
    - 從資料集中隨機挑選十份資料進行測試

2. 進行secp256r1簽章驗證測試
    - 使用secp256r1演算法對選取的十份資料進行簽章
    - 使用智能合約中的驗證功能進行簽章驗證

3. 撰寫測試報告
    - 記錄每份資料經過驗證後的結果
    - 總結各項測試通過與否，撰寫完整的測試報告

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：

1. 提供已部署智能合約之區塊鏈瀏覽器連結
    - 確認智能合約已成功部署至區塊鏈上
    - 取得智能合約在區塊鏈瀏覽器上的連結，以供查核

2. 檢討與改進
    - 回顧整個智能合約開發過程，檢討可能的改進空間
    - 根據測試報告和使用者反饋，進行智能合約程式介面的優化和改進

3. 提交最終成果
    - 提交完整的智能合約程式介面及測試報告
    - 確保智能合約部署情況良好，並提供連結供查核。"
A2,"工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 設計API的端點
    - 確定資源、請求方法和回應資料格式
    - 使用Express框架進行API設計

2. 規劃安全機制
    - 避免重入攻擊，提升系統效能
    - 考慮加入身份驗證機制，確保API安全性

3. 撰寫API規格文件
    - 包含聲明文件內容定義、addSigner、veriftyClaim 及 query 功能
    - 確保文件內容清晰明瞭，易於開發人員理解

"," 

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 設計API端點Endpoints
    - 確定各端點的功能及其對應的資源
    - 制定端點的請求方法和回應格式

2. 實施API設計
    - 使用Express框架搭建API
    - 編寫端點的實際程式碼，實現addSigner、veriftyClaim 及 query 功能

3. 建立測試環境
    - 撰寫測試案例，驗證API的正確性
    - 進行端對端測試，確保API端點能正確運作

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 從API端點設計到撰寫程式碼
    - 協助團隊成員設計API端點
    - 實際撰寫程式碼，實現API所需功能

2. 安全機制的加強
    - 加入SSL/TLS協定，保護資料傳輸過程的安全性
    - 設置防火牆，減少可能的攻擊風險

3. 文件撰寫
    - 完成API規格文件，包含各端點功能描述及使用範例
    - 更新API文件，隨著API開發的進展作出調整

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 進行API端點端對端測試
    - 測試API端點的各個功能是否符合規格
    - 修復測試中發現的bug，確保功能正確性

2. 優化API設計
    - 針對API設計中的性能瓶頸進行優化
    - 調整端點設計，提升系統效能

3. 整體檢討API設計
    - 與團隊成員一同檢討API設計的優勢和不足
    - 提出改進建議，持續優化API設計方案

",
A2,"工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 設計API的端點
    - 確定資源、請求方法和回應資料格式
    - 使用Express框架進行API設計

2. 規劃安全機制
    - 避免重入攻擊，提升系統效能
    - 考慮加入身份驗證機制，確保API安全性

3. 撰寫API規格文件
    - 包含聲明文件內容定義、addSigner、veriftyClaim 及 query 功能
    - 確保文件內容清晰明瞭，易於開發人員理解

"," 

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 設計API端點Endpoints
    - 確定各端點的功能及其對應的資源
    - 制定端點的請求方法和回應格式

2. 實施API設計
    - 使用Express框架搭建API
    - 編寫端點的實際程式碼，實現addSigner、veriftyClaim 及 query 功能

3. 建立測試環境
    - 撰寫測試案例，驗證API的正確性
    - 進行端對端測試，確保API端點能正確運作

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 從API端點設計到撰寫程式碼
    - 協助團隊成員設計API端點
    - 實際撰寫程式碼，實現API所需功能

2. 安全機制的加強
    - 加入SSL/TLS協定，保護資料傳輸過程的安全性
    - 設置防火牆，減少可能的攻擊風險

3. 文件撰寫
    - 完成API規格文件，包含各端點功能描述及使用範例
    - 更新API文件，隨著API開發的進展作出調整

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 進行API端點端對端測試
    - 測試API端點的各個功能是否符合規格
    - 修復測試中發現的bug，確保功能正確性

2. 優化API設計
    - 針對API設計中的性能瓶頸進行優化
    - 調整端點設計，提升系統效能

3. 整體檢討API設計
    - 與團隊成員一同檢討API設計的優勢和不足
    - 提出改進建議，持續優化API設計方案

",
A2,"工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 設計API的端點
    - 確定資源、請求方法和回應資料格式
    - 使用Express框架進行API設計

2. 規劃安全機制
    - 避免重入攻擊，提升系統效能
    - 考慮加入身份驗證機制，確保API安全性

3. 撰寫API規格文件
    - 包含聲明文件內容定義、addSigner、veriftyClaim 及 query 功能
    - 確保文件內容清晰明瞭，易於開發人員理解

"," 

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 設計API端點Endpoints
    - 確定各端點的功能及其對應的資源
    - 制定端點的請求方法和回應格式

2. 實施API設計
    - 使用Express框架搭建API
    - 編寫端點的實際程式碼，實現addSigner、veriftyClaim 及 query 功能

3. 建立測試環境
    - 撰寫測試案例，驗證API的正確性
    - 進行端對端測試，確保API端點能正確運作

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 從API端點設計到撰寫程式碼
    - 協助團隊成員設計API端點
    - 實際撰寫程式碼，實現API所需功能

2. 安全機制的加強
    - 加入SSL/TLS協定，保護資料傳輸過程的安全性
    - 設置防火牆，減少可能的攻擊風險

3. 文件撰寫
    - 完成API規格文件，包含各端點功能描述及使用範例
    - 更新API文件，隨著API開發的進展作出調整

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：

1. 進行API端點端對端測試
    - 測試API端點的各個功能是否符合規格
    - 修復測試中發現的bug，確保功能正確性

2. 優化API設計
    - 針對API設計中的性能瓶頸進行優化
    - 調整端點設計，提升系統效能

3. 整體檢討API設計
    - 與團隊成員一同檢討API設計的優勢和不足
    - 提出改進建議，持續優化API設計方案

",
