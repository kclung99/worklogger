A1,"```plaintext
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 智能合約設計
    - 分析EIP-1056標準中的功能需求。
    - 設計合約架構及資料模型。
    - 準備智能合約代碼模板。
2. 橢圓曲線加密支援
    - 選定secp256r1橢圓曲線簽章驗證方案。
    - 整合該方案至合約設計中。
    - 初步測試簽章驗證功能。
3. 測試案例準備
    - 從公開資料集中隨機挑選十份資料。
    - 為每份資料設計相應的簽章驗證測試案例。
    - 確認測試案例符合設計需求。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 實現智能合約功能
    - 根據設計模板完成12項EIP-1056定義之智能合約介面。
    - 利用secp256r1橢圓曲線加密技術實現簽章驗證功能。
    - 通過內部測試驗證基本功能正確性。
2. 測試數據導入
    - 將先前準備的十份公開資料導入測試環境中。
    - 執行各項簽章驗證測試，記錄測試結果。
    - 確認所有測試案例執行完成並無重大錯誤。
3. 智能合約部署
    - 指定區塊鏈網絡並進行部署配置。
    - 將智能合約部屬至指定區塊鏈上。
    - 紀錄區塊鏈瀏覽器連結以供查閱。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 測試報告整理
    - 將十份資料之簽章驗證測試結果進行彙整。
    - 分析各項測試通過與未通過之因素。
    - 整理並撰寫測試報告，確保報告資訊完整。
2. 審查與調整
    - 對智能合約代碼進行審查，尋找潛在問題。
    - 根據測試報告及審查結果，進行必要的代碼優化。
    - 再次進行簽章驗證測試，確認修正後功能無誤。
3. 結案報告
    - 完成所有測試及審查工作。
    - 製作最終報告，包含測試報告及區塊鏈瀏覽器連結。
    - 將所有資料及報告提交至專案管理系統。
```"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計階段
    - 研究並分析EIP-1056規範，確定智能合約介面需求。
    - 計畫支援secp256r1橢圓區線加密之簽章驗證。
    - 擬定智能合約部署策略及相關測試內容。
2. 簽章測試準備
    - 蒐集並整理公開資料集，隨機挑選十份資料。
    - 開發測試腳本，進行secp256r1簽章驗證。
    - 撰寫詳細的測試報告模板，規範測試結果記錄方式。
3. 智能合約初步實現
    - 撰寫智能合約程式碼，依EIP-1056規範進行實作。
    - 進行單元測試，確保基本功能正常運作。
    - 部署初版智能合約至測試環境，準備進行整合測試。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 集成與測試
    - 整合智能合約介面，確保EIP-1056規範完整實現。
    - 運行secp256r1簽章驗證測試，記錄每份資料的測試通過與否。
    - 編寫測試報告，詳細描述每次測試的過程和結果。
2. 智能合約優化
    - 分析測試結果，識別潛在的改進點。
    - 優化智能合約程式碼，改進效能並修正潛在漏洞。
    - 再次部署優化後的智能合約至測試環境，進行回歸測試。
3. 文件撰寫
    - 完成智能合約操作手冊，包含介面定義及使用說明。
    - 撰寫技術報告，總結智能合約開發過程、技術選型及測試結果。
    - 準備部署文檔，指導後續正式環境的部署操作。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 部署與驗證
    - 將優化後的智能合約部署到區塊鏈的正式環境。
    - 驗證部署結果，確保智能合約在正式環境中正確運行。
    - 提供區塊鏈瀏覽器連結供檢查和驗證。
2. 最終測試
    - 在正式環境中進行最後的secp256r1簽章驗證測試。
    - 確認所有測試項目已成功通過，完善測試報告。
    - 進行全面性回歸測試，確保整體系統穩定性。
3. 報告與審核
    - 編制最終的測試報告和智能合約開發報告。
    - 準備所有技術文件和測試報告，提交給相關審核單位。
    - 整理開發過程中所有的資料和記錄，歸檔保存以備未來查閱。"
A1,,"
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計EIP-1056智能合約接口
    - 研究EIP-1056規範及其接口需求。
    - 設計智能合約接口以符合EIP-1056規範。
    - 起草初步智能合約程式碼並確保接口定義完整。

2. 支援secp256r1簽章驗證功能
    - 設計簽章驗證功能以支援secp256r1橢圓區線加密。
    - 參考現有範例程式碼進行簽章驗證邏輯的設計。
    - 確認簽章驗證功能與智能合約接口的整合性。

3. 預備測試數據
    - 搜集公開資料集並清洗數據。
    - 從中隨機挑選十份資料作為測試樣本。
    - 準備測試報告模板以便記錄測試結果。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 實施EIP-1056智能合約接口
    - 編寫智能合約程式碼，實現設計好的EIP-1056接口。
    - 完成智能合約程式碼的調試工作以排除潛在錯誤。
    - 進行功能測試以確認接口的正確性和穩定性。

2. 整合secp256r1簽章驗證功能
    - 在智能合約中實現secp256r1簽章驗證功能。
    - 將簽章驗證功能與智能合約其他部分進行整合。
    - 測試整合後的智能合約，確保簽章驗證功能正常運作。

3. 測試與驗證
    - 使用預備的十份資料對智能合約進行secp256r1簽章驗證測試。
    - 記錄每次測試的結果，確認是否通過簽章驗證。
    - 撰寫測試報告，包含各項測試通過與否的詳細紀錄。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 部署智能合約至區塊鏈
    - 準備部署環境，包括配置開發工具及區塊鏈節點。
    - 將經過測試的智能合約部署至指定的區塊鏈網絡。
    - 確認部署成功並取得區塊鏈瀏覽器連結。

2. 區塊鏈瀏覽器驗證
    - 確認智能合約已經部署並運行於區塊鏈上。
    - 通過區塊鏈瀏覽器連結檢視智能合約的部署狀態。
    - 將區塊鏈瀏覽器連結納入最終報告。

3. 評估與報告
    - 綜合所有測試報告和區塊鏈部署結果，進行總結。
    - 撰寫最終報告，詳細說明每一步的實施與結果。
    - 提交最終報告，包括所有測試紀錄和區塊鏈瀏覽器連結。"
A1,,"

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4月

工作流程與步驟：
1. 智能合約介面設計
    - 依據EIP-1056定義設計12項智能合約介面。
    - 確認每項介面功能符合標準。
    - 撰寫初步合約草稿，涵蓋基本功能。
2. 支援secp256r1簽章驗證
    - 研究secp256r1橢圓曲線簽章驗證技術。
    - 撰寫簽章驗證的方法及其邏輯。
    - 進行本地端測試，確認方法可用性。
3. 智能合約部署前準備
    - 準備部署合約所需的區塊鏈環境。
    - 確認區塊鏈網絡穩定性。
    - 檢查智能合約的可用性，確保部署成功。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年5月

工作流程與步驟：
1. 智能合約開發
    - 編寫和完善12項EIP-1056智能合約介面。
    - 整合secp256r1簽章驗證方法至合約中。
    - 進行初步內部測試，確認各界面和方法的功能性。
2. 資料測試
    - 從公開資料集中隨機抽取十份資料。
    - 使用智能合約進行簽章驗證測試。
    - 記錄測試結果，確認簽章驗證的成功與失敗例子。
3. 增強合約穩定性
    - 根據測試結果修正發現的問題。
    - 進行多輪測試以提高智能合約的穩定性。
    - 準備最終測試報告，記錄各項測試通過與否之詳細情況。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年6月

工作流程與步驟：
1. 智能合約最終部署
    - 確認合約經過多次測試，已達穩定狀態。
    - 部署合約至區塊鏈網絡。
    - 確認合約部署成功，並進行連結測試。
2. 區塊鏈瀏覽器連結生成
    - 生成智能合約在區塊鏈上的瀏覽器連結。
    - 確認瀏覽器連結可正確顯示合約信息。
    - 記錄部署過程與瀏覽器連結。
3. 最終測試報告整理
    - 匯總並整理所有測試報告。
    - 提交測試報告一式。
    - 確認所有測試報告準確，並包括簽章驗證通過與否的詳細數據。"
A2,,"
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7月初

工作流程與步驟：
1. API端點設計
    - 確定主要API端點，包括addSigner、verifyClaim及query功能
    - 確認HTTP請求方法，如POST、GET
    - 定義各端點的請求和回應資料格式
2. 資源規劃
    - 確認資源需求及其相關資料結構
    - 設計資源模型並進行數據庫對應
    - 評估資源間的關聯及其影響
3. 用express框架設計API
    - 使用express建立基本API框架
    - 配置必要的中間件，如body-parser
    - 測試基本端點以確保API可運作

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7月中

工作流程與步驟：
1. API端點設計
    - 詳細設計addSigner端點的業務邏輯及參數驗證 
    - 完成verifyClaim端點的驗證流程設計
    - 額外確認query功能中可能的過濾和排序需求
2. 安全機制規劃
    - 研究防止重入攻擊的方法
    - 為各API端點加入Token驗證機制
    - 檢查數據傳輸加密需求，確保數據安全
3. 用express框架設計API
    - 實作addSigner功能，包括參數驗證和錯誤處理
    - 實作verifyClaim，包括邏輯處理及安全檢查
    - 測試並調整query功能的性能表現

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年8月初

工作流程與步驟：
1. API端點設計
    - 整合之前設計的各個API端點，形成整體API接口
    - 進一步優化addSigner和verifyClaim的業務邏輯
    - 回顧query功能，確保其靈活性和效能性
2. 資源與安全機制
    - 調整資源模型，確保數據庫結構最佳化
    - 實施防止重入攻擊的措施，如nonce機制
    - 測試並確保安全機制的有效性及系統穩定性
3. 用express框架優化API
    - 針對API性能進行優化，如減少不必要的中間件使用
    - 實現日誌紀錄功能，用於監控和調試
    - 確保所有端點符合RESTful設計原則

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年9月初

工作流程與步驟：
1. API端點設計檢討與優化
    - 進行內部代碼審查和優化，提升代碼品質
    - 根據反饋調整addSigner和verifyClaim端點
    - 提升query功能的查詢效率和數據回應速度
2. 安全機制測試與完善
    - 全面測試防止重入攻擊的有效性
    - 強化Token驗證機制，防範常見攻擊手法
    - 確認數據傳輸加密的可靠性，確保敏感信息安全
3. 用express框架完成API開發
    - 最終測試所有端點，確保無錯誤並與預期功能一致
    - 資料庫遷移至正式環境，進行初步測試
    - 編寫詳細API使用說明文檔，便於後續維護和擴展"
A2,,"
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7月初

工作流程與步驟：
1. API 規格文件設計
    - 初步編寫 API 聲明文件，包括所有預計的功能
    - 定義 addSigner、verifyClaim 和 query 功能的參數和返回值格式
    - 使用 OpenAPI 規範撰寫初版 API 規格文件
2. API 端點設計
    - 確認資源名稱，例如 /signer、/claim、/query
    - 定義每個端點的請求方法，使用 POST 和 GET
    - 設定回應資料格式，統一使用 JSON
3. 會議討論與需求確認
    - 召開設計審查會議，邀請相關技術人員參與
    - 討論每個功能點的具體實現方式與可能遇到的問題
    - 根據回饋修改初版 API 規格文件

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7月中

工作流程與步驟：
1. 安全機制規劃
    - 研究並了解重入攻擊及其原理
    - 設計防範重入攻擊的機制，例如增加 nonce 和 timestamp 欄位
    - 實現內部安全檢查邏輯，檢測重複請求
2. 實作 addSigner 功能
    - 建立 addSigner 端點，使用 Express 框架實作
    - 實現添加簽名者的邏輯，確保資料驗證和錯誤處理
    - 撰寫對應的單元測試，確保功能正確運行
3. 資料回應格式優化
    - 定義回應狀態碼及對應的標準訊息
    - 優化回應格式，統一錯誤回應和成功回應的格式
    - 設定範例資料，更新 API 規格文件中的範例部分

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年8月初

工作流程與步驟：
1. 實作 verifyClaim 功能
    - 建立 verifyClaim 端點，使用 Express 框架實作
    - 撰寫驗證聲明的邏輯，包括解析和校驗
    - 撰寫對應的單元測試，確保驗證邏輯有效
2. 安全性測試與部署準備
    - 進行漏洞檢測，確保所有端點沒有顯示注入等常見漏洞
    - 實施防範 DDoS 攻擊的策略，例如設置速率限制
    - 準備佈署前的環境設定，包括伺服器和資料庫
3. 文件更新與維護
    - 更新 API 規格文件，反映最新的端點變更和邏輯
    - 撰寫使用指南，解釋如何使用新功能和端點
    - 定期進行文件審查和維護，確保準確性和最新性

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年8月中

工作流程與步驟：
1. 實作 query 功能
    - 建立 query 端點，使用 Express 框架實作
    - 實現查詢功能的商業邏輯，確保資料正確性和完整性
    - 撰寫對應的單元測試，確保查詢功能正確運行
2. 系統整合與測試
    - 將所有功能端點整合到主系統中，進行全系統測試
    - 撰寫整合測試腳本，模擬現實使用情境
    - 進行穿透測試，找出可能存在的安全漏洞
3. 最終審查與發佈準備
    - 召開最終設計審查會議，確定所有功能已完全實現
    - 文件齊全且準確，包括使用指南和技術手冊
    - 準備正式發佈與運行，設定發佈計畫和時間表"
A2,,"
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7月

工作流程與步驟：
1. 設計API端點初稿
    - 確定API的基本功能模組，例如addSigner、veriftyClaim和query功能。
    - 使用Express框架開發API初稿。
    - 定義每個端點的HTTP方法（POST、GET等）和路由。
2. 資源與請求方法規劃
    - 指定API每個端點所需的資源，例如請求體和參數。
    - 確認每個端點的請求方法，並確定GET、POST等適當的方法。
    - 設計每個端點的回應資料格式，確保符合規格文件的要求。
3. 安全機制初步設計
    - 探討並初步設計重入攻擊防禦機制。
    - 評估Express框架的安全性功能，並進行初步實作。
    - 預估並測試API的效能，確保安全機制不會影響系統效能。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年8月

工作流程與步驟：
1. 深化API設計
    - 根據API規格文件詳細設計各端點的聲明文件內容。
    - 完善addSigner功能的參數驗證及錯誤處理機制。
    - 確認veriftyClaim功能的驗證方法屬於安全範疇。
2. 請求方法與回應格式調整
    - 重新審視每個端點的請求方法之設計，確保符合需求。
    - 調整回應資料格式，加入更多詳盡錯誤信息及狀態碼。
    - 編寫單元測試，驗證每個端點的正確性。
3. 強化安全機制
    - 針對遇到的潛在威脅進行更深入的分析。
    - 完善重入攻擊防禦機制，整合頻率限制等措施。
    - 測試不同攻擊情境下的系統反應，確保防禦策略有效。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年8月-9月

工作流程與步驟：
1. API端點實作
    - 完成所有規劃中的API端點實作。
    - 定義與生成檢查示例數據，測試API功能的完整性。
    - 整合Express框架的中間件，處理不同驗證及錯誤處理邏輯。
2. 安全性測試及優化
    - 強化api端點安全性測試，包括跨站請求偽造（CSRF）等。
    - 根據測試結果微調重入攻擊防禦機制。
    - 使用負載測試工具驗證API在高流量下的效能。
3. 文檔與開發者指引
    - 撰寫詳細的API文檔，包括各功能操作指引及回應示例。
    - 建立開發者指南，幫助未來開發者理解設計及使用API。
    - 與相關團隊進行文檔審查，確保內容的準確性及完整性。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年9月

工作流程與步驟：
1. API系統測試
    - 進行整合測試，確認各個API端點的相互協作性。
    - 根據測試結果，修復發現的問題及潛在的安全集合。
    - 檢查各種錯誤狀況的處理邏輯，確保系統穩定性。
2. 安全及效能評估
    - 進行深度安全評估，模擬實際攻擊測試API防禦機制。
    - 進一步優化重入攻擊防禦機制，納入業界最佳實踐。
    - 使用效能測試工具最終調整API性能，確保達到預期效能指標。
3. 整理最終交付
    - 整理並提交完整的API規格文件，包括更新的聲明內容及防禦機制。
    - 確保所有API端點的開發文檔及測試報告完備。
    - 與相關部門討論最終交付並收集反饋，準備進入上線階段。"
