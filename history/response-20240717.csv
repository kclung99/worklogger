A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 需求分析與設計
    - 仔細閱讀並理解EIP-1056智能合約程式接口需求。
    - 研究secp256r1橢圓曲線加密辦法，以確保簽章驗證之可行性。
    - 規劃智能合約架構與功能，確保滿足所有定義項目。
2. 進行智能合約編程
    - 根據設計架構撰寫合約代碼，確保符合EIP-1056接口定義。
    - 引入並測試secp256r1簽章驗證邏輯，確認其可行性與準確性。
    - 撰寫單元測試，測試智能合約的各種功能與簽章驗證。
3. 初步測試與調整
    - 使用部分測試資料進行初步測試，確認代碼的正確性。
    - 收集並分析初步測試結果，針對不足之處進行調整與改進。
    - 修正代碼中的錯誤，並重複測試以確認問題解決。
","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 資料集準備與測試
    - 使用公開資料集，從中隨機挑選十份資料作為測試樣本。
    - 針對每份資料進行secp256r1簽章驗證測試，確認其有效性。
    - 將簽章驗證結果進行記錄，包括每個測試的通過與否。
2. 智能合約部署
    - 準備部署所需的區塊鏈環境，確保所有依賴項目一應俱全。
    - 將智能合約部署至區塊鏈上，記錄部署過程中的所有操作與結果。
    - 使用區塊鏈瀏覽器驗證合約狀態，確認合約已成功部署並啟動。
3. 測試結果總結
    - 匯總所有測試結果，製作測試報告一式，包含每個測試的詳細說明。
    - 評估簽章驗證邏輯的準確性及其在智能合約中的應用效果。
    - 根據測試結果撰寫部署報告，記錄智能合約的部署進度與狀況。
","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 測試報告撰寫與提交
    - 編寫詳細的測試報告，包含所有簽章驗證測試的通過與否。
    - 確保報告包含清晰的測試步驟、結果以及任何遇到的問題和解決方法。
    - 提交最終測試報告予相關團隊或主管，確認所有工作完成。
2. 部署狀況核查
    - 定期檢查區塊鏈瀏覽器，確保智能合約持續運作正常。
    - 收集並記錄智能合約的運行情況，確認無異常發生。
    - 根據運行狀況，評估是否需要進一步優化或調整代碼。
3. 專案結案
    - 完成專案相關的所有文書工作，確保記錄完整。
    - 與團隊成員進行回顧會議，總結專案經驗教訓。
    - 完成立項總結報告，為未來專案提供參考及改進建議。"
A1,,"
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計智能合約
    - 根據EIP-1056標準草擬智能合約程式介面的定義。
    - 開發智能合約的初步版本並測試其基本功能。
    - 確保智能合約能支援secp256r1橢圓區線加密簽章驗證。
2. 測試資料準備
    - 從公開資料集中隨機選取十份資料作為測試樣本。
    - 確認選取的資料適用於secp256r1簽章驗證測試。
    - 並在測試過程中記錄每一份資料的簽章驗證結果。
3. 預備部署計畫
    - 制定智能合約部署到區塊鏈上的詳細計畫。
    - 設定相應的區塊鏈測試環境以模擬真實場景。
    - 準備好部署過程中的必要工具和資源。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 實裝與功能實現
    - 按照EIP-1056標準完善智能合約的程式介面。
    - 完成智能合約支援secp256r1橢圓區線加密的簽章驗證功能。
    - 撰寫單元測試確保每一個功能模組正常運行。
2. 簽章驗證測試
    - 使用準備好的十份公開資料集進行secp256r1簽章驗證測試。
    - 記錄每項測試的通過與否，並分析失敗原因。
    - 編寫測試報告，包含各項測試的詳細結果和測試環境描述。
3. 部署前檢查
    - 確認智能合約的所有功能已經過充分測試。
    - 檢查智能合約與區塊鏈環境的兼容性。
    - 使用測試環境模擬部署過程，確保正式部署流程順利。

","
工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 正式部署
    - 根據檢查結果進行智能合約的正式部署到主網。
    - 確認部署過程中無任何錯誤或中斷。
    - 紀錄區塊鏈瀏覽器上的合約部署連結以供查閱。
2. 部署後測試
    - 再次使用已記錄好的十份公開資料集進行檢驗。
    - 驗證合約在區塊鏈上的運行狀況是否正常。
    - 確保所有測試資料的簽章驗證結果與預期一致。
3. 撰寫最終報告
    - 編制最終的智能合約開發與測試報告，包含過程描述和結果分析。
    - 提供測試通過與否的詳細報告一式。
    - 將區塊鏈瀏覽器上的合約連結附加到報告中以供參考。"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計EIP-1056智能合約介面
    - 依據EIP-1056規範，設計12項智能合約的介面和功能
    - 確認每項功能描述並在合約中進行定義
    - 確保合約介面支援secp256r1橢圓區線加密簽章驗證
2. 收集並準備測試資料
    - 使用公開資料集，隨機挑選10份資料
    - 準備測試所需的簽章和對應的公鑰
    - 記錄資料來源及其使用情況
3. 編寫與測試智能合約
    - 撰寫智能合約的所有功能模塊
    - 用選取的資料進行secp256r1簽章驗證測試
    - 記錄每項測試的通過與否並整理成測試報告

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 執行智能合約測試
    - 使用事先隨機挑選的10份資料來測試合約簽章驗證功能
    - 確認智能合約能夠正確識別與驗證簽章
    - 針對每份資料的測試結果進行詳細記錄
2. 修正和優化智能合約
    - 根據測試結果修正智能合約中的問題
    - 優化合約的效能和簽章驗證速度
    - 確保所有12項EIP-1056定義的智能合約功能無誤
3. 撰寫測試報告
    - 整理測試過程和最終結果
    - 每項測試根據通過與否進行分類記錄
    - 完成並儲存測試報告以供參考

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 部署智能合約
    - 把經過測試和優化的智能合約部署至區塊鏈上
    - 確認合約部署成功且能正常運作
    - 記錄部署過程與區塊鏈合約地址
2. 整理與反饋
    - 檢查部署後智能合約的運行狀態
    - 收集使用者反饋並分析其意見
    - 提供部署智能合約之區塊鏈瀏覽器連結以供檢視
3. 最終報告與文件整理
    - 匯總設計、測試、部署過程中的所有記錄和文件
    - 完成最終報告並儲存備份
    - 分享區塊鏈瀏覽器連結與團隊成員進行確認"
A1,"工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 設計智能合約介面
    - 分析EIP-1056的要求及其技術細節。
    - 設計合約的主要功能和方法，確保符合EIP-1056規範。
    - 設計支援secp256r1橢圓區線加密的簽章驗證功能。
2. 撰寫智能合約
    - 編寫利於測試的智能合約初版。
    - 採用Solidity語言進行編碼，確保程式碼結構合理。
    - 定義必要的變量和函數，遵循EIP-1056的規範。
3. 初步測試與調整
    - 執行單元測試，驗證合約各項功能的正確性。
    - 修正測試中發現的錯誤，調整算法和接聽事件。
    - 確保合約能處理有效及無效的secp256r1簽章驗證測試。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 從公開資料集挑選測試資料
    - 選取合適的公開資料集來源，確保數據質量可靠。
    - 從資料集中隨機挑選十份資料，作為簽章驗證測試樣本。
    - 準備測試所需的資料格式，確保其與智能合約的接口相容。
2. 簽章驗證測試
    - 使用選取的十份資料進行secp256r1簽章驗證測試。
    - 記錄每個測試樣本的測試過程、結果及其通過與否。
    - 整理和分析測試數據，確保驗證邏輯之準確性。
3. 撰寫測試報告
    - 將測試結果格式化，撰寫詳細的測試報告。
    - 報告內容包括：測試樣本、測試步驟、結果以及是否通過。
    - 將測試報告準備為一式，為最終審核提供依據。

","

工作記錄
查核點編號： A1 智能合約開發
記錄時間： 113年4-6月

工作流程與步驟：
1. 智能合約部署
    - 選擇適當的區塊鏈網路環境（如Ethereum主網或測試網）。
    - 確認合約程式碼無誤，準備部署相關設定。
    - 將智能合約部署至區塊鏈上，並記錄交易哈希及相關資訊。
2. 驗證合約運行
    - 使用區塊鏈瀏覽器確認合約部署是否成功。
    - 測試部署後合約功能，確保其能在區塊鏈環境中正常運行。
    - 記錄測試結果，確保所有操作符合預期效果。
3. 提供區塊鏈瀏覽器連結
    - 獲取合約在區塊鏈上的地址及相關資訊。
    - 生產區塊鏈瀏覽器連結一份，供團隊和相關方查閱。
    - 將連結納入最終報告，確保資訊透明與準確。"
A2,,"
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. API端點設計
    - 根據API規格文件確定必要的API端點。
    - 在查核點規格文件中定義addSigner端點。
    - 使用Express框架設計API基本結構。
2. 資源、請求方法與回應資料格式確定
    - 確定addSigner端點的HTTP請求方法（POST）。
    - 設計addSigner的請求和回應資料格式。
    - 制定API文檔，規範每個端點的請求與回應。
3. 安全機制規劃初步
    - 研究重入攻擊的防護措施。
    - 初步設計防止重入攻擊的安全機制。
    - 討論如何在Express框架中實作這些安全機制。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. API端點具體化
    - 確定veriftyClaim API端點的需求。
    - 設計veriftyClaim端點的請求方法及回應格式。
    - 使用Express框架進行實作。
2. 繼續定義資源、請求方法與資料格式
    - 確定veriftyClaim的HTTP請求方法（POST）。
    - 設計veriftyClaim的請求與回應資料格式（包含錯誤處理）。
    - 繼續完善API文檔，詳細描述每個端點。
3. 安全機制進一步規劃
    - 進一步研究重入攻擊機制。
    - 與團隊討論具體實作細節。
    - 初步在addSigner端點中實作防重入攻擊機制。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. API端點添加
    - 確認query功能的需求。
    - 設計query端點的請求與回應格式。
    - 使用Express框架完成query端點的實作。
2. 完善資源、請求方法與資料格式
    - 確定query的HTTP請求方法（GET）。
    - 設計query的請求參數及回應資料格式。
    - 更新API文檔，加入新的端點描述。
3. 安全機制實作
    - 完善addSigner和veriftyClaim端點的防重入攻擊機制。
    - 增加單元測試，確保安全機制的有效性。
    - 在開發環境中進行初步測試。

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. API設計評審
    - 收集開發團隊對API設計的反饋。
    - 核對API文件與實作是否一致，進行必要的調整。
    - 檢查每個端點的請求和回應格式是否準確。
2. 資源、請求方法與資料格式最終確認
    - 最終確定所有API端點的請求方法（POST & GET）。
    - 確認所有回應格式，包含錯誤狀況。
    - 完成API文檔的最終版，進行內部審核。
3. 安全機制最終測試
    - 全面測試addSigner、veriftyClaim和query端點的防重入攻擊安全機制。
    - 檢查API整體效能，確保安全機制不影響效能。
    - 在內部測試環境下進行整合測試，確保所有功能正常運行。"
A2,,"
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 設計API端點
    - 決定資源（signer, claim, query等）
    - 確認請求方法（GET, POST, PUT, DELETE）
    - 確認回應資料格式（JSON）
2. 初步API設計
    - 使用Express框架來處理HTTP請求
    - 設計addSigner端點，接受簽名者資訊並保存
    - 設計verifyClaim端點，驗證聲明的有效性
3. 開始代碼實現
    - 建立Express專案框架
    - 初步配置路由
    - 測試基本功能，確保端點可用

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 完善API功能設計
    - 增加數據驗證層，確保輸入的數據有效
    - 設計query功能，方便用戶查詢特定資源
    - 確認不同端點間的依賴關係及數據流轉
2. 安全機制規劃
    - 導入JWT進行用戶身份驗證
    - 使用中間件來防護跨站請求偽造（CSRF）
    - 考慮重入攻擊風險及其防範措施
3. 整合測試
    - 撰寫單元測試，確保各端點按預期運行
    - 構建API文檔供團隊成員參考
    - 測試API的安全性

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 深入進行安全機制設計
    - 實現用戶角色和權限管理
    - 優化JWT，設計刷新機制增強安全性
    - 構建防範重入攻擊的檢查機制
2. 增強系統效能
    - 將靜態文件緩存，以加速響應
    - 使用Redis作為快取系統
    - 實施分布式負載均衡
3. 完成代碼審查
    - 聯合團隊成員進行代碼審查
    - 修正潛在的性能問題和安全漏洞
    - 整理審查結束後的總結文檔

","
工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7-9月

工作流程與步驟：
1. 最終階段測試及優化
    - 執行壓力測試，驗證系統在高負載下的穩定性
    - 根據壓力測試結果進行效能優化
    - 修正任何發現的故障或bug
2. 用戶和團隊培訓
    - 為用戶提供API使用手冊
    - 培訓團隊成員如何使用和維護API
    - 建立培訓反饋機制，進一步完善文檔
3. 上線準備
    - 準備部署腳本和自動化工具
    - 進行最終上線前的全系統測試
    - 制定應急預案，應對上線後可能出現的問題
",
A2,,"

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年7月

工作流程與步驟：
1. 設計API端點
    - 確定API資源，如聲明文件內容定義的資源
    - 確認各個功能的請求方法，例如POST用於addSigner功能
    - 定義API回應資料的格式，包括JSON格式的回應
2. 安全機制規劃
    - 調查重入攻擊的風險與常見手法
    - 規劃防重入攻擊的措施，如使用互斥鎖
    - 新增基於Express框架的安全中介軟體
3. 初步API 模板建立
    - 使用Express框架搭建基本的API結構
    - 為每個功能（addSigner、verifyClaim、query）建立路由
    - 測試基本的端點響應，確保初步設計的可行性

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年8月

工作流程與步驟：
1. API 詳細設計
    - 完善各端點的參數要求，包括必須和選填參數
    - 定義更詳細的回應格式，包括錯誤碼和訊息
    - 為addSigner、verifyClaim和query功能撰寫詳細的聲明文件
2. 安全機制加強
    - 實施輸入資料的驗證，防止 SQL 注入和XSS 攻擊
    - 添加日誌記錄，監控異常行為
    - 設置速率限制，防止過度請求影響效能
3. 單元測試
    - 為每個API端點撰寫單元測試
    - 使用MOCHA 和 CHAI 等測試工具驗證API功能
    - 修正測試中發現的任何潛在問題，保證API穩定性

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年9月上旬

工作流程與步驟：
1. 集成測試
    - 組織測試團隊進行集成測試
    - 執行多用戶情景，驗證並行請求的穩定性
    - 撰寫測試報告，記錄各項測試結果與問題
2. 安全演練
    - 模擬可能的攻擊情境，如重入攻擊，測試安全防護措施
    - 評估防護效果，記錄和修復發現的漏洞
    - 更新安全文檔，確保所有實施措施都被記錄和追蹤
3. 日誌與監控設定
    - 配置詳細的API日誌，記錄請求和回應
    - 使用ELK堆栈(Elasticsearch, Logstash, Kibana) 設置實時監控
    - 定義異常行為告警機制，迅速響應潛在問題

","

工作記錄
查核點編號： A2 平台API設計
記錄時間： 113年9月下旬

工作流程與步驟：
1. 最終審查
    - 召開審查會議，確認所有端點和功能符合設計標準
    - 逐步檢查安全機制，確保沒有遺漏
    - 最終確認API聲明文件的完整性和準確性
2. 上線前準備
    - 部署API至預備環境，進行最終測試
    - 確認部屬流程無誤，包括自動化腳本的檢查
    - 準備回滾計劃，應對突發狀況
3. 正式上線
    - 完成最終的數據遷移與備份
    - 將API部屬至正式環境，啟動監控系統
    - 向各相關方發佈上線通知，並開始收集用戶反饋"
